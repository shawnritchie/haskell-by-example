
==================== FINAL INTERFACE ====================
2017-02-26 09:37:03.89623 UTC

interface haskell-by-example-0.1.0.0-AvWof41KC5XGTmmdiwDUVM:CH04.SplitLines 8002
  interface hash: 2b19c5d7823e00e5883afa3ce81b2705
  ABI hash: 299c03cc656388c862287740437bacd9
  export-list hash: 0fc5e3f627b9bec94ee2b39dd3f7e0bf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9eb25bead33fd5ac9135014adaa18698
  sig of: Nothing
  used TH splices: False
  where
exports:
  CH04.SplitLines.fixLines
  CH04.SplitLines.isLineTerminator
  CH04.SplitLines.safeHead
  CH04.SplitLines.safeInit
  CH04.SplitLines.safeLast
  CH04.SplitLines.safeTail
  CH04.SplitLines.splitLines
  CH04.SplitLines.splitWith
  CH04.SplitLines.unsafeListHandling
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
5c1ccf71d4ae13d581f12072ad86639f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CH04.SplitLines.$trModule2
                   CH04.SplitLines.$trModule1) -}
ac2bac3472fe5620a43fe5130d29f1e2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CH04.SplitLines"#) -}
ee97ec9cd66cbf17b026f5f533d640db
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "haskell-by-example-0.1.0.0-AvWof41KC5XGTmmdiwDUVM"#) -}
175e6fdb79446e03febf877ca9fef428
  $wsplitWith :: (a -> GHC.Types.Bool) -> [a] -> (# [a], [[a]] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><L,1*U>,
     Inline: [0] -}
1ce7145a04f555d2e34418c8194b4df2
  fixLines :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (input :: GHC.Base.String) ->
                 Data.OldList.unlines (CH04.SplitLines.splitLines input)) -}
f0a06e41dc32154d83542217221c5d0b
  isLineTerminator :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: GHC.Types.Char) ->
                 case c of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.False
                   '\n'# -> GHC.Types.True
                   '\r'# -> GHC.Types.True } }) -}
d9437e8e9a86d6fb355568f8b964ef7d
  safeHead :: [a] -> GHC.Base.Maybe a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: [a]) ->
                 case xs of wild {
                   [] -> GHC.Base.Nothing @ a : ds1 ds2 -> GHC.Base.Just @ a ds1 }) -}
ac8b2c8746ed28df972592041e93ae4d
  safeInit :: [a] -> GHC.Base.Maybe [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: [a]) ->
                 case xs of wild {
                   [] -> GHC.Base.Nothing @ [a]
                   : ds1 ds2 -> GHC.Base.Just @ [a] (GHC.List.init1 @ a ds1 ds2) }) -}
0cf3e0e1c84515ec10b031aa9c426a2a
  safeLast :: [a] -> GHC.Base.Maybe a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (xs :: [a]) ->
                 case xs of wild {
                   [] -> GHC.Base.Nothing @ a
                   : ds1 ds2
                   -> GHC.Base.Just
                        @ a
                        (CH04.SplitLines.safeLast1 @ a wild (GHC.List.lastError @ a)) }) -}
7666e9ff04e23b5f5a48e12e8cc29766
  safeLast1 :: [a] -> a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
2200db66beec4dceb0bfca4952e33800
  safeTail :: [a] -> GHC.Base.Maybe [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: [a]) ->
                 case xs of wild {
                   [] -> GHC.Base.Nothing @ [a]
                   : ds1 ds2 -> GHC.Base.Just @ [a] ds2 }) -}
2a266d4a70c7be606742beb799d43c36
  splitLines :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,1*U> -}
45a50d19253d14a748a52a01f446fae5
  splitWith :: (a -> GHC.Types.Bool) -> [a] -> [[a]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><L,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: a -> GHC.Types.Bool) (w1 :: [a]) ->
                 case CH04.SplitLines.$wsplitWith @ a w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ [a] ww1 ww2 }) -}
cdc2fd9dd6f552b4f1e462eae85c966e
  unsafeListHandling :: [a] -> ([a] -> b) -> GHC.Base.Maybe b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*C1(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (xs :: [a]) (fx :: [a] -> b) ->
                 case xs of wild {
                   [] -> GHC.Base.Nothing @ b
                   : ds1 ds2 -> GHC.Base.Just @ b (fx wild) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

